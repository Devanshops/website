<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference-rsses on Choria Orchestrator</title>
    <link>http://docs.choria.io/reference/index.xml</link>
    <description>Recent content in Reference-rsses on Choria Orchestrator</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://docs.choria.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reference</title>
      <link>http://docs.choria.io/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.choria.io/reference/</guid>
      <description>

&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;This section provide reference information about the plugins included in Choria.  You do not need to read or understand these to use Choria but they provide more in depth information if you are curious or want to see what is customizable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NATS Connector</title>
      <link>http://docs.choria.io/reference/nats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.choria.io/reference/nats/</guid>
      <description>

&lt;p&gt;A MCollective Connector plugin for the &lt;a href=&#34;https://nats.io/&#34;&gt;NATS&lt;/a&gt; middleware broker designed to work within a configured Choria setup.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s goals are to be secure by default while requiring almost no configuration, it only supports TLS and it only supports doing verified TLS connections to the broker. You cannot disable this.&lt;/p&gt;

&lt;p&gt;This plugin uses the nats rubygem which unfortunately needs Event Machine. So you might need compilers on your nodes to install that.&lt;/p&gt;

&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;After installing MCollective Choria this plugin is already completely deployed. This page is for reference only.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;In your mcollective config files you should enable this plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;connector = nats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you put your NATS server on your Puppet Master and it uses port &lt;em&gt;4222&lt;/em&gt; on the hostname &lt;em&gt;puppet&lt;/em&gt; then everything will just work.&lt;/p&gt;

&lt;p&gt;If not you can add some DNS SRV records:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;_mcollective-server._tcp   IN  SRV 10  0 4222  nats1.example.net.
_mcollective-server._tcp   IN  SRV 11  0 4222  nats2.example.net.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use SRV records with Puppet it might be better for you to use the Puppet scheme so you can also do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;_x-puppet-mcollective._tcp     IN  SRV 10  0 4222  nats1.example.net.
_x-puppet-mcollective._tcp     IN  SRV 11  0 4222  nats2.example.net.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At present weights are not considered.&lt;/p&gt;

&lt;p&gt;You can hard code the server list, see the Configuration Refernece section below.&lt;/p&gt;

&lt;h2 id=&#34;server-tls-setup&#34;&gt;Server TLS Setup&lt;/h2&gt;

&lt;p&gt;When running as root it assumes it&amp;rsquo;s a server and so SSL settings are as per a Puppet Agent.&lt;/p&gt;

&lt;h2 id=&#34;client-tls-setup&#34;&gt;Client TLS Setup&lt;/h2&gt;

&lt;p&gt;When not running as root it will try to use SSL from your home directory and again some assumptions about you running Puppet 4.&lt;/p&gt;

&lt;p&gt;Here the certname is based on your username so &lt;em&gt;uname.mcollective.pem&lt;/em&gt;, you need to create these certs via your Puppet CA:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mco choria request_cert
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-nats-server-configuration&#34;&gt;Example NATS Server configuration&lt;/h2&gt;

&lt;p&gt;NATS is pretty easy to deploy, this plugin will only communicate over TLS so you need to configure things correctly.  The &lt;em&gt;ripienaar-nats&lt;/em&gt; module does this for you, but here&amp;rsquo;s a example NATS config of a 3 node cluster set up with TLS should you wish to do your own:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;port: 4222
monitor_port: 8222

debug: false
trace: false

tls {
  cert_file: &amp;quot;/etc/puppetlabs/puppet/ssl/certs/dev1.example.net.pem&amp;quot;
  key_file: &amp;quot;/etc/puppetlabs/puppet/ssl/private_keys/dev1.example.net.pem&amp;quot;
  ca_file: &amp;quot;/etc/puppetlabs/puppet/ssl/certs/ca.pem&amp;quot;
  verify: true
  timeout: 2
}

cluster {
  port: 4223
  no_advertise: true

  tls {
    cert_file: &amp;quot;/etc/puppetlabs/puppet/ssl/certs/dev1.example.net.pem&amp;quot;
    key_file: &amp;quot;/etc/puppetlabs/puppet/ssl/private_keys/dev1.example.net.pem&amp;quot;
    ca_file: &amp;quot;/etc/puppetlabs/puppet/ssl/certs/ca.pem&amp;quot;
    verify: true
    timeout: 2
  }

  authorization {
    user: routes
    password: eighieGhohqu
    timeout: 0.75
  }

  routes = [
    nats-route://routes:s3cret@dev2.example.net:4223
    nats-route://routes:s3cret@puppet1.example.net:4223
  ]
}

max_payload: 1048576
max_pending_size: 10485760
max_connections: 65536
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also get this going quickly using Docker for development:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4222:4222 -p 4223:4223 \
  -v /path/to/your/gnatsd.conf:/config/gnatsd.conf \
    -v /etc/puppetlabs/puppet/ssl:/etc/puppetlabs/puppet/ssl \
      --name nats nats --config /config/gnatsd.conf -DV
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plugin-configuration-reference&#34;&gt;Plugin Configuration Reference&lt;/h2&gt;

&lt;p&gt;You should only need to change configuration if you do not accept the defaults, this plugin is intended to
just work, so if you have a standard setup that does not just work please let me know so we can see if it
can be catered for.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;choria.srv_domain&lt;/td&gt;
&lt;td&gt;Override the domain used for SRV lookups&lt;/td&gt;
&lt;td&gt;default to &lt;em&gt;facter networking.domain&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;choria.middleware_hosts&lt;/td&gt;
&lt;td&gt;Comma seperated list of servers like &lt;em&gt;nats1:4222,nats2:4222&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Uses SRV records or &lt;em&gt;puppet:4222&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nats.user&lt;/td&gt;
&lt;td&gt;Username when connecting to nats&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nats.pass&lt;/td&gt;
&lt;td&gt;Password when connecting to nats&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can set &lt;em&gt;MCOLLECTIVE_NATS_USERNAME&lt;/em&gt; and &lt;em&gt;MCOLLECTIVE_NATS_PASSWORD&lt;/em&gt; to configure the &lt;em&gt;nats.user&lt;/em&gt; and &lt;em&gt;nats.pass&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSL Security</title>
      <link>http://docs.choria.io/reference/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.choria.io/reference/security/</guid>
      <description>

&lt;p&gt;Choria includes a MCollective Security plugin designed to Just Work and be secure by default.&lt;/p&gt;

&lt;p&gt;The major goal is that the configuration should be as little as possible work.
It should be as easy to get a very secure MCollective as it is to get the legacy
&lt;em&gt;psk&lt;/em&gt; one working.  To that goal there is only 1 setting you have to set to enable
this and yield a secure working collective.&lt;/p&gt;

&lt;p&gt;It shares a similar model to the old MCollective SSL security plugin but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no shared private key anywhere&lt;/li&gt;
&lt;li&gt;The plugin has no settings to change for a default secure behaviour.
 It just works&lt;/li&gt;
&lt;li&gt;Requestor certs are validated against the Puppet CA and only ones signed by
 it can make requests&lt;/li&gt;
&lt;li&gt;Public key distribution is automatic and does not require configuring&lt;/li&gt;
&lt;li&gt;Only certificate names matching &lt;em&gt;/.mcollective$/&lt;/em&gt; can be used, this way
 someone cannot just steal any signed cert from any node and make requests.
 This can though optionally be changed with a configuration option.&lt;/li&gt;
&lt;li&gt;It provides crypto validated callerid in the form &lt;em&gt;choria=certname&lt;/em&gt; for use
 in MCollective AAA&lt;/li&gt;
&lt;li&gt;Special support exist for making mature AAA compatible REST services that
 can make requests on behalf of other callerids&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It requires you to have a working Puppet setup with a Master acting as a CA, it
only supports Puppet 4 AIO. Every MCollective node must already be a Puppet node.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;After installing MCollective Choria this plugin is already completely deployed. This page is for reference only.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;client-user-setup&#34;&gt;Client / User Setup&lt;/h2&gt;

&lt;p&gt;Clients need their own certificates, you use Puppet to obtain them, this will only work
with Puppet AIO paths.&lt;/p&gt;

&lt;p&gt;A helper exist to do this for you, run it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mco choria request_cert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fetch the normal auto detected user certificate, you can supply arguments
to change the certname.&lt;/p&gt;

&lt;p&gt;They then set &lt;em&gt;securityprovider = choria&lt;/em&gt; in their client configuration and it will work.&lt;/p&gt;

&lt;p&gt;Only certificates matching &lt;em&gt;/.mcollective$/&lt;/em&gt; will be usable unless you change defaults
which is not recommended.&lt;/p&gt;

&lt;p&gt;Certificates matching &lt;em&gt;/.privileged.mcollective$/&lt;/em&gt; have special meaning and should only
be approved if you use something like the &lt;a href=&#34;../../development/rest&#34;&gt;REST&lt;/a&gt; features.&lt;/p&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;On the server you have to set &lt;em&gt;securityprovider = choria&lt;/em&gt;, assuming you have a working
Puppet 4 AIO setup. This plugin itself has no options to change any paths to certificates.&lt;/p&gt;

&lt;p&gt;Client certificates are cached in _/etc/puppetlabs/mcollective/choria_security/public&lt;em&gt;certs&lt;/em&gt;,
the directory will be created if it does not exist.  There is no case where the cert
will be overwritten once cached, changing a cert for user entails you having to remove
the cert from the servers.&lt;/p&gt;

&lt;h3 id=&#34;certificate-whitelist&#34;&gt;Certificate Whitelist&lt;/h3&gt;

&lt;p&gt;The default behaviour should be safe enough, you know exactly what will be allowed
when you sign a certificate ending in &lt;em&gt;.mcollective&lt;/em&gt; but you might want to have a
whitelist of certificates, this can be controlled with the server config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugin.choria.security.certname_whitelist = bob , /\.mcollective$/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will match a specific certificate name &lt;em&gt;bob&lt;/em&gt; and the default.&lt;/p&gt;

&lt;h2 id=&#34;manual-client-certificate-requests&#34;&gt;Manual Client Certificate Requests&lt;/h2&gt;

&lt;p&gt;The manual certificate request process can be seen here in case the helper is not working or you
want to generate them offline and store somewhere.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puppet certificate generate ${USER}.mcollective --ca-location remote --ca_server ca.example.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your CA admins will now have a certificate request that they must sign like normal,
once signed you do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puppet certificate find ${USER}.mcollective --ca-location remote --ca_server ca.example.net
$ puppet certificate find ca --ca-location remote --ca_server ca.example.net
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;special-handling-of-rest-servers-and-other-delegators&#34;&gt;Special handling of REST servers and other delegators&lt;/h3&gt;

&lt;p&gt;The security model of this plugin specifically cater for delegated requests while remaining
compatible with the MCollective Authentication, Authorization and Auditing features.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;../../development/rest&#34;&gt;REST&lt;/a&gt; for details about this scenario.&lt;/p&gt;

&lt;h2 id=&#34;message-protocol-details&#34;&gt;Message Protocol Details&lt;/h2&gt;

&lt;p&gt;Developer details of the messaging protocol in &lt;a href=&#34;../../development/messages&#34;&gt;Message Structure&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>